import socket
import ssl
import re
import os
import time
import fnmatch
from client.config import FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS, CLAMAV_HOST, CLAMAV_PORT

class FTPSession:
    def __init__(self):
        # Thi·∫øt l·∫≠p SSL/TLS context
        self.context = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
        self.context.check_hostname = False
        self.context.verify_mode = ssl.CERT_NONE
        self.context.options |= ssl.OP_NO_TLSv1 | ssl.OP_NO_TLSv1_1

        self.ctrl = None
        self.ctrl_file = None
        self.current_dir = ""
        self.prompt_confirm = True

    def connect_ftp(self):
        if self.ctrl:
            print("‚ö†Ô∏è ƒê√£ k·∫øt n·ªëi t·ªõi FTP server. Vui l√≤ng 'close' tr∆∞·ªõc khi k·∫øt n·ªëi l·∫°i.")
            return

        # K·∫øt n·ªëi control socket v√† th·ª±c hi·ªán AUTH TLS
        raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        raw.connect((FTP_HOST, FTP_PORT))
        print(raw.recv(1024).decode().strip())

        raw.sendall(b'AUTH TLS\r\n')
        print(raw.recv(1024).decode().strip())

        self.ctrl = self.context.wrap_socket(raw, server_hostname=FTP_HOST, do_handshake_on_connect=True)
        self.ctrl_file = self.ctrl.makefile('r', encoding='utf-8')

        # ƒêƒÉng nh·∫≠p
        self._send_cmd(f"USER {FTP_USER}")
        self._get_response()
        self._send_cmd(f"PASS {FTP_PASS}")
        self._get_response()

        # Thi·∫øt l·∫≠p b·∫£o m·∫≠t d·ªØ li·ªáu
        self._send_cmd("PBSZ 0")
        self._get_response()
        self._send_cmd("PROT P")
        self._get_response()

    def close(self):
        if self.ctrl:
            self._send_cmd("QUIT")
            self._get_response()
            self.ctrl.close()
            self.ctrl = None
            self.ctrl_file = None
            self.current_dir = ""  # Reset current_dir khi ƒë√≥ng k·∫øt n·ªëi
            print("‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi FTP")
        else:
            print("‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi FTP n√†o ƒë·ªÉ ƒë√≥ng.")


    def _send_cmd(self, cmd: str):
        print(f">>> {cmd}")
        self.ctrl.sendall((cmd + "\r\n").encode())

    def _get_response(self) -> str:
        lines = []
        while True:
            line = self.ctrl_file.readline().strip()
            print(f"<<< {line}")
            lines.append(line)
            if re.match(r'^\d{3} ', line):
                break
        return lines[-1]

    def list(self):
        # D√πng EPSV + TLS session reuse cho k√™nh d·ªØ li·ªáu
        self._send_cmd("EPSV")
        resp = self._get_response()
        m = re.search(r"\(\|\|\|(\d+)\|\)", resp)
        if not m:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch EPSV: {resp}")
            return
        port = int(m.group(1))

        data_raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        data_raw.connect((FTP_HOST, port))
        data_sock = self.context.wrap_socket(
            data_raw,
            server_hostname=FTP_HOST,
            session=self.ctrl.session,
            do_handshake_on_connect=True
        )

        # Y√™u c·∫ßu danh s√°ch
        self._send_cmd("LIST")
        resp = self._get_response()
        if not resp.startswith('150'):
            print(f"‚ùå L·ªói m·ªü k√™nh d·ªØ li·ªáu: {resp}")
            data_sock.close()
            return

        # ƒê·ªçc d·ªØ li·ªáu
        data = b""
        while True:
            chunk = data_sock.recv(4096)
            if not chunk:
                break
            data += chunk
        data_sock.close()

        print("=== DANH S√ÅCH ===")
        print(data.decode('utf-8', errors='replace'))
        self._get_response()

    def pwd(self):
        self._send_cmd("PWD")
        resp = self._get_response()
        m = re.search(r'"(.+?)"', resp)
        self.current_dir = m.group(1) if m else self.current_dir
        print(f"üìÇ Th∆∞ m·ª•c hi·ªán t·∫°i: {self.current_dir or '/'}")

    def cwd(self, path):
        self._send_cmd(f"CWD {path}")
        resp = self._get_response()
        if resp.startswith('250'):
            # C·∫≠p nh·∫≠t current_dir t∆∞∆°ng ƒë·ªëi
            if path == '..':
                self.current_dir = '/'.join(self.current_dir.strip('/').split('/')[:-1])
            elif self.current_dir:
                self.current_dir = f"{self.current_dir}/{path.strip('/')}"
            else:
                self.current_dir = path.strip('/')
            print(f"‚úÖ ƒê√£ chuy·ªÉn ƒë·∫øn: {self.current_dir}")
        else:
            print(f"‚ùå L·ªói CWD: {resp}")

    def mkd(self, folder):
        self._send_cmd(f"MKD {folder}")
        resp = self._get_response()
        if resp.startswith('257'):
            print(f"‚úÖ ƒê√£ t·∫°o th∆∞ m·ª•c: {folder}")
        else:
            print(f"‚ùå L·ªói MKD: {resp}")

    def rn(self, old_name, new_name):
        self._send_cmd(f"RNFR {old_name}")
        resp = self._get_response()
        if not resp.startswith('350'):
            print(f"‚ùå L·ªói RNFR: {resp}")
            return
        self._send_cmd(f"RNTO {new_name}")
        resp = self._get_response()
        if resp.startswith('250'):
            print(f"‚úÖ ƒê·ªïi t√™n {old_name} ‚Üí {new_name}")
        else:
            print(f"‚ùå L·ªói RNTO: {resp}")

    def status(self):
        print(f"üåê ƒê√£ k·∫øt n·ªëi: {'‚úÖ' if self.ctrl else '‚ùå'}")
        print(f"üìÇ Th∆∞ m·ª•c hi·ªán t·∫°i: {self.current_dir or '/'}")
        print(f"üõÅ Ch·∫ø ƒë·ªô passive: ƒêang ƒë∆∞·ª£c s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh qua EPSV (kh√¥ng t·∫Øt ƒë∆∞·ª£c trong phi√™n b·∫£n n√†y)")
        print(f"üîí TLS session reuse: {'‚úÖ' if self.ctrl and hasattr(self.ctrl, 'session') else '‚ùå'}")
        print(f"üì¢ Ch·∫ø ƒë·ªô x√°c nh·∫≠n khi mget/mput: {'B·∫¨T' if self.prompt_confirm else 'T·∫ÆT'}")
        print(f"üì¶ ƒê·ªãa ch·ªâ server: {FTP_HOST}:{FTP_PORT}")
        print(f"üë§ Ng∆∞·ªùi d√πng: {FTP_USER}")
    def passive(self):
        print("‚ÑπÔ∏è Ch·∫ø ƒë·ªô passive ƒëang ƒë∆∞·ª£c d√πng m·∫∑c ƒë·ªãnh qua EPSV (kh√¥ng th·ªÉ t·∫Øt trong phi√™n b·∫£n n√†y).")

    def help(self):
                print("""
        =================== TR·ª¢ GI√öP C√ÅC L·ªÜNH FTP ===================

        L·ªánh k·∫øt n·ªëi v√† tr·∫°ng th√°i:
        open               - K·∫øt n·ªëi t·ªõi FTP server s·ª≠ d·ª•ng TLS b·∫£o m·∫≠t.
        close              - Ng·∫Øt k·∫øt n·ªëi kh·ªèi server.
        status             - Hi·ªÉn th·ªã th√¥ng tin k·∫øt n·ªëi hi·ªán t·∫°i v√† tr·∫°ng th√°i b·∫£o m·∫≠t.

        C√†i ƒë·∫∑t ch·∫ø ƒë·ªô:
        passive [on|off]   - B·∫≠t ho·∫∑c t·∫Øt ch·∫ø ƒë·ªô truy·ªÅn d·ªØ li·ªáu Passive (khuy√™n d√πng).
        prompt [on|off]    - B·∫≠t ho·∫∑c t·∫Øt x√°c nh·∫≠n khi d√πng mget/mput nhi·ªÅu file.

        ƒêi·ªÅu h∆∞·ªõng th∆∞ m·ª•c:
        pwd                - In ra th∆∞ m·ª•c hi·ªán t·∫°i tr√™n server.
        cd <dir>           - Chuy·ªÉn sang th∆∞ m·ª•c <dir>.
        ls                 - Li·ªát k√™ danh s√°ch file v√† th∆∞ m·ª•c hi·ªán t·∫°i.
        mkdir <name>       - T·∫°o th∆∞ m·ª•c m·ªõi tr√™n server.
        rmdir <name>       - Xo√° th∆∞ m·ª•c (v√† m·ªçi th·ª© b√™n trong, n·∫øu c√≥). [b√≠ danh: rmd]

        X·ª≠ l√Ω file:
        get <file>         - T·∫£i 1 file t·ª´ server v·ªÅ m√°y c·ª•c b·ªô.
        put <file>         - T·∫£i 1 file t·ª´ m√°y l√™n server (s·∫Ω ƒë∆∞·ª£c qu√©t virus).
        mget <pattern>     - T·∫£i nhi·ªÅu file (v√≠ d·ª•: *.txt ho·∫∑c a*) v·ªõi x√°c nh·∫≠n.
        mput <pattern>     - Upload nhi·ªÅu file v·ªõi x√°c nh·∫≠n v√† qu√©t virus.
        delete <file>      - Xo√° file kh·ªèi server.
        rename <old> <new> - ƒê·ªïi t√™n file ho·∫∑c th∆∞ m·ª•c.

        Kh√°c:
        quit               - Tho√°t ch∆∞∆°ng tr√¨nh FTP.
        help, ?            - Hi·ªÉn th·ªã b·∫£ng tr·ª£ gi√∫p n√†y.

        =============================================================
        G·ª£i √Ω:
        - B·∫°n c√≥ th·ªÉ d√πng c√°c k√Ω t·ª± ƒë·∫°i di·ªán nh∆∞ *.txt ƒë·ªÉ x·ª≠ l√Ω nhi·ªÅu file.
        - H√£y d√πng 'prompt off' n·∫øu b·∫°n kh√¥ng mu·ªën b·ªã h·ªèi m·ªói l·∫ßn v·ªõi mget/mput.
        - Lu√¥n ki·ªÉm tra tr·∫°ng th√°i b·∫±ng l·ªánh 'status' tr∆∞·ªõc khi t·∫£i hay upload.
        """)

   
    def delete_file(self, filename):
        # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i b·∫±ng LIST
        self._send_cmd("EPSV")
        resp = self._get_response()
        m = re.search(r"\(\|\|\|(\d+)\|\)", resp)
        if not m:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch EPSV: {resp}")
            return
        port = int(m.group(1))

        data_raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        data_raw.connect((FTP_HOST, port))
        data_sock = self.context.wrap_socket(
            data_raw,
            server_hostname=FTP_HOST,
            session=self.ctrl.session,
            do_handshake_on_connect=True
        )

        self._send_cmd("LIST")
        resp = self._get_response()
        if not resp.startswith('150'):
            print(f"‚ùå L·ªói m·ªü k√™nh d·ªØ li·ªáu: {resp}")
            data_sock.close()
            return

        data = b""
        while True:
            chunk = data_sock.recv(4096)
            if not chunk:
                break
            data += chunk
        data_sock.close()
        self._get_response()

        # Ki·ªÉm tra xem file c√≥ t·ªìn t·∫°i v√† l√† file th∆∞·ªùng kh√¥ng
        found = False
        for line in data.decode(errors="replace").splitlines():
            parts = line.split()
            if len(parts) < 9:
                continue
            name = " ".join(parts[8:])
            if name == filename:
                if line.startswith("d"):
                    print(f"‚ùå '{filename}' l√† th∆∞ m·ª•c. H√£y d√πng l·ªánh rmdir ƒë·ªÉ x√≥a.")
                    return
                found = True
                break

        if not found:
            print(f"‚ùå File '{filename}' kh√¥ng t·ªìn t·∫°i trong th∆∞ m·ª•c hi·ªán t·∫°i.")
            return

        # Th·ª±c hi·ªán l·ªánh x√≥a
        self._send_cmd(f"DELE {filename}")
        resp = self._get_response()
        if resp.startswith("250"):
            print(f"‚úÖ ƒê√£ x√≥a file: {filename}")
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ x√≥a file '{filename}': {resp}")

    def rmd(self, folder):
        print(f"üìÅ ƒêang x√≥a th∆∞ m·ª•c (ƒë·ªá quy): {folder}")

        # G·ª≠i CWD v√† ki·ªÉm tra ph·∫£n h·ªìi
        self._send_cmd(f"CWD {folder}")
        resp = self._get_response()
        if not resp.startswith("250"):
            print(f"‚ùå Kh√¥ng th·ªÉ v√†o th∆∞ m·ª•c '{folder}': {resp}")
            return

        # L·∫•y danh s√°ch n·ªôi dung th∆∞ m·ª•c
        self._send_cmd("EPSV")
        resp = self._get_response()
        m = re.search(r"\(\|\|\|(\d+)\|\)", resp)
        if not m:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch EPSV khi x√≥a {folder}: {resp}")
            self._send_cmd("CWD ..")  # Quay l·∫°i n·∫øu c·∫ßn
            self._get_response()
            return
        port = int(m.group(1))

        try:
            data_raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            data_raw.settimeout(10)
            data_raw.connect((FTP_HOST, port))
            data_sock = self.context.wrap_socket(
                data_raw,
                server_hostname=FTP_HOST,
                session=self.ctrl.session,
                do_handshake_on_connect=True
            )

            self._send_cmd("LIST")
            resp = self._get_response()
            if not resp.startswith("150"):
                print(f"‚ùå L·ªói m·ªü k√™nh d·ªØ li·ªáu: {resp}")
                data_sock.close()
                self._send_cmd("CWD ..")
                self._get_response()
                return

            data = b""
            while True:
                chunk = data_sock.recv(4096)
                if not chunk:
                    break
                data += chunk
            data_sock.close()
            self._get_response()
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi l·∫•y danh s√°ch th∆∞ m·ª•c: {e}")
            self._send_cmd("CWD ..")
            self._get_response()
            return

        # X·ª≠ l√Ω t·ª´ng m·ª•c trong th∆∞ m·ª•c
        for line in data.decode(errors="replace").splitlines():
            parts = line.split()
            if len(parts) < 9:
                continue
            name = " ".join(parts[8:])
            if line.startswith("d"):
                self.rmd(name)
            else:
                self._send_cmd(f"DELE {name}")
                self._get_response()
                print(f"üóëÔ∏è ƒê√£ x√≥a file: {name}")

        # Quay l·∫°i th∆∞ m·ª•c cha v√† x√≥a th∆∞ m·ª•c hi·ªán t·∫°i
        self._send_cmd("CWD ..")
        self._get_response()

        self._send_cmd(f"RMD {folder}")
        resp = self._get_response()
        if resp.startswith("250"):
            print(f"‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c: {folder}")
        else:
            print(f"‚ùå Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c: {folder}: {resp}")

    def download_ftp(self, remote_filename, local_filename=None):
        """
        T·∫£i file t·ª´ FTP server xu·ªëng m√°y c·ª•c b·ªô
        :param remote_filename: T√™n file tr√™n server (c√≥ th·ªÉ l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi/ tuy·ªát ƒë·ªëi)
        :param local_filename: T√™n file l∆∞u tr·ªØ c·ª•c b·ªô (m·∫∑c ƒë·ªãnh gi·ªëng remote_filename)
        """
        if not self.ctrl:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi t·ªõi server. H√£y d√πng l·ªánh 'open' tr∆∞·ªõc.")
            return

        # X√°c ƒë·ªãnh t√™n file c·ª•c b·ªô
        local_filename = local_filename or os.path.basename(remote_filename)

        # Thi·∫øt l·∫≠p k·∫øt n·ªëi d·ªØ li·ªáu qua EPSV
        self._send_cmd("EPSV")
        resp = self._get_response()
        match = re.search(r"\(\|\|\|(\d+)\|\)", resp)
        if not match:
            print(f"‚ùå Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c c·ªïng t·ª´ EPSV: {resp}")
            return
        data_port = int(match.group(1))

        # G·ª≠i l·ªánh t·∫£i file
        self._send_cmd(f"RETR {remote_filename}")
        resp = self._get_response()
        if not resp.startswith('150'):
            print(f"‚ùå Server t·ª´ ch·ªëi t·∫£i file: {resp}")
            return

        # Thi·∫øt l·∫≠p k√™nh d·ªØ li·ªáu SSL v·ªõi session reuse
        try:
            # T·∫°o socket d·ªØ li·ªáu th√¥
            data_sock_raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            data_sock_raw.connect((FTP_HOST, data_port))
            
            # B·ªçc socket b·∫±ng SSL context, t√°i s·ª≠ d·ª•ng session
            data_sock = self.context.wrap_socket(
                data_sock_raw,
                server_hostname=FTP_HOST,
                session=self.ctrl.session  # Quan tr·ªçng: t√°i s·ª≠ d·ª•ng session TLS
            )
            
            # Nh·∫≠n d·ªØ li·ªáu v√† ghi v√†o file
            start_time = time.time()
            total_bytes = 0
            
            with open(local_filename, 'wb') as f:
                while True:
                    chunk = data_sock.recv(4096)
                    if not chunk:
                        break
                    f.write(chunk)
                    total_bytes += len(chunk)
            
            # ƒê√≥ng k·∫øt n·ªëi d·ªØ li·ªáu
            data_sock.close()
            
            # X√°c nh·∫≠n ho√†n th√†nh t·ª´ server
            transfer_time = time.time() - start_time
            self._get_response()  # Nh·∫≠n ph·∫£n h·ªìi 226 Transfer complete
            
            print(f"‚úÖ T·∫£i th√†nh c√¥ng: {remote_filename} ‚Üí {local_filename}")
            print(f"üìä K√≠ch th∆∞·ªõc: {total_bytes} bytes | "
                f"Th·ªùi gian: {transfer_time:.2f}s | "
                f"T·ªëc ƒë·ªô: {total_bytes/transfer_time/1024:.2f} KB/s")

        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh t·∫£i file: {str(e)}")
            # X√≥a file c·ª•c b·ªô n·∫øu t·∫£i th·∫•t b·∫°i
            if os.path.exists(local_filename):
                os.remove(local_filename)
    def prompt(self, *args):
        if not args:
            # ƒê·∫£o tr·∫°ng th√°i n·∫øu kh√¥ng c√≥ tham s·ªë
            self.prompt_confirm = not self.prompt_confirm
        else:
            # X·ª≠ l√Ω tham s·ªë
            arg = args[0].lower()
            if arg == 'on':
                self.prompt_confirm = True
            elif arg == 'off':
                self.prompt_confirm = False
            else:
                print("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. D√πng 'prompt on' ho·∫∑c 'prompt off'")
                return
        
        status = "B·∫¨T" if self.prompt_confirm else "T·∫ÆT"
        print(f"‚úÖ ƒê√£ {status} ch·∫ø ƒë·ªô x√°c nh·∫≠n khi d√πng l·ªánh mget")
    def mget(self, pattern):
        """
        T·∫£i nhi·ªÅu file t·ª´ server d·ª±a tr√™n pattern (v√≠ d·ª•: *.txt, a*)
        X√°c nh·∫≠n t·ª´ng file n·∫øu prompt_confirm=True
        """
        if not self.ctrl:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi t·ªõi server. H√£y d√πng l·ªánh 'open' tr∆∞·ªõc.")
            return

        # B∆∞·ªõc 1: L·∫•y danh s√°ch file t·ª´ server
        files = self._get_file_list()
        if files is None:
            return

        # B∆∞·ªõc 2: L·ªçc file theo pattern
        matched_files = fnmatch.filter(files, pattern)
        if not matched_files:
            print(f"üîç Kh√¥ng t√¨m th·∫•y file n√†o kh·ªõp v·ªõi pattern: {pattern}")
            return

        print(f"üîç T√¨m th·∫•y {len(matched_files)} file kh·ªõp pattern:")
        for i, filename in enumerate(matched_files, 1):
            print(f"  {i}. {filename}")

        # B∆∞·ªõc 3: T·∫£i t·ª´ng file v·ªõi x√°c nh·∫≠n ri√™ng
        success_count = 0
        for filename in matched_files:
            try:
                if self.prompt_confirm:
                    confirm = input(f"B·∫°n c√≥ mu·ªën t·∫£i file '{filename}'? (y/n/a): ")
                    if confirm.lower() == 'n':
                        print(f"‚è© ƒê√£ b·ªè qua file: {filename}")
                        continue
                    if confirm.lower() == 'a':  # Ch·ªçn 'a' ƒë·ªÉ t·∫£i t·∫•t c·∫£ kh√¥ng h·ªèi l·∫°i
                        self.prompt_confirm = False
                        
                print(f"‚¨áÔ∏è  ƒêang t·∫£i: {filename}")
                self.download_ftp(filename)
                success_count += 1
            except Exception as e:
                print(f"‚ùå L·ªói khi t·∫£i {filename}: {str(e)}")
        
        print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {success_count}/{len(matched_files)} file")

    def _get_file_list(self):
            """H√†m n·ªôi b·ªô ƒë·ªÉ l·∫•y danh s√°ch file t·ª´ server"""
            # Thi·∫øt l·∫≠p k√™nh d·ªØ li·ªáu qua EPSV
            self._send_cmd("EPSV")
            resp = self._get_response()
            m = re.search(r"\(\|\|\|(\d+)\|\)", resp)
            if not m:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ ph√¢n t√≠ch EPSV: {resp}")
                return None
            port = int(m.group(1))

            data_raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            data_raw.connect((FTP_HOST, port))
            data_sock = self.context.wrap_socket(
                data_raw,
                server_hostname=FTP_HOST,
                session=self.ctrl.session,
                do_handshake_on_connect=True
            )

            # Y√™u c·∫ßu danh s√°ch file
            self._send_cmd("LIST")
            resp = self._get_response()
            if not resp.startswith('150'):
                print(f"‚ùå L·ªói m·ªü k√™nh d·ªØ li·ªáu: {resp}")
                data_sock.close()
                return None

            # ƒê·ªçc d·ªØ li·ªáu danh s√°ch
            data = b""
            while True:
                chunk = data_sock.recv(4096)
                if not chunk:
                    break
                data += chunk
            data_sock.close()
            self._get_response()

            # Ph√¢n t√≠ch danh s√°ch file
            file_list = []
            for line in data.decode('utf-8', errors='replace').splitlines():
                parts = line.split()
                if len(parts) < 9:
                    continue
                filename = " ".join(parts[8:])
                # B·ªè qua th∆∞ m·ª•c (b·∫Øt ƒë·∫ßu b·∫±ng 'd')
                if not line.startswith('d'):
                    file_list.append(filename)
            
            return file_list
    def scan_with_clamav(self, file_path):
            """K·∫øt n·ªëi t·ªõi ClamAV Agent local"""
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.connect(('127.0.0.1', 9001))
                    
                    # G·ª≠i t√™n file
                    s.sendall(os.path.basename(file_path).encode() + b"\n")
                    
                    # G·ª≠i n·ªôi dung file
                    with open(file_path, 'rb') as f:
                        while True:
                            chunk = f.read(4096)
                            if not chunk:
                                break
                            s.sendall(chunk)
                    
                    # ƒê√°nh d·∫•u k·∫øt th√∫c
                    s.sendall(b"===SCAN_DONE===")
                    
                    # Nh·∫≠n k·∫øt qu·∫£
                    return s.recv(1024) == b'OK'
            except Exception as e:
                print(f"L·ªói qu√©t virus: {str(e)}")
                return False
    def upload_ftp(self, local_filename, remote_filename=None):
        """
        Upload file l√™n server (B·∫ÆT BU·ªòC qu√©t virus tr∆∞·ªõc)
        Gi·ªØ nguy√™n to√†n b·ªô ch·ª©c nƒÉng upload c≈© + t√≠ch h·ª£p qu√©t virus
        """
        # --- PH·∫¶N KI·ªÇM TRA VIRUS M·ªöI TH√äM ---
        print(f"üîç ƒêang qu√©t virus cho file: {local_filename}")
        if not self.scan_with_clamav(local_filename):
            print("üî¥ KH√îNG th·ªÉ upload do file ch·ª©a virus ho·∫∑c l·ªói qu√©t!")
            return False
        print("üü¢ File an to√†n, b·∫Øt ƒë·∫ßu upload...")
        
        # --- GI·ªÆ NGUY√äN PH·∫¶N UPLOAD FTP C≈® ---
        if not self.ctrl:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi t·ªõi server. H√£y d√πng l·ªánh 'open' tr∆∞·ªõc.")
            return False

        if not os.path.exists(local_filename):
            print(f"‚ùå File c·ª•c b·ªô kh√¥ng t·ªìn t·∫°i: {local_filename}")
            return False
            
        remote_filename = remote_filename or os.path.basename(local_filename)

        self._send_cmd("EPSV")
        resp = self._get_response()
        match = re.search(r"\(\|\|\|(\d+)\|\)", resp)
        if not match:
            print(f"‚ùå Kh√¥ng ph√¢n t√≠ch ƒë∆∞·ª£c c·ªïng t·ª´ EPSV: {resp}")
            return False
        data_port = int(match.group(1))

        self._send_cmd(f"STOR {remote_filename}")
        resp = self._get_response()
        if not resp.startswith('150'):
            print(f"‚ùå Server t·ª´ ch·ªëi upload file: {resp}")
            return False

        try:
            data_sock_raw = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            data_sock_raw.connect((FTP_HOST, data_port))
            data_sock = self.context.wrap_socket(
                data_sock_raw,
                server_hostname=FTP_HOST,
                session=self.ctrl.session
            )
            
            start_time = time.time()
            total_bytes = 0
            
            with open(local_filename, 'rb') as f:
                while True:
                    chunk = f.read(4096)
                    if not chunk:
                        break
                    data_sock.sendall(chunk)
                    total_bytes += len(chunk)
            
            data_sock.close()
            transfer_time = time.time() - start_time
            self._get_response()
            
            print(f"‚úÖ Upload th√†nh c√¥ng: {local_filename} ‚Üí {remote_filename}")
            print(f"üìä K√≠ch th∆∞·ªõc: {total_bytes} bytes | "
                f"Th·ªùi gian: {transfer_time:.2f}s | "
                f"T·ªëc ƒë·ªô: {total_bytes/transfer_time/1024:.2f} KB/s")
            return True

        except Exception as e:
            print(f"‚ùå L·ªói upload: {str(e)}")
            self._send_cmd(f"DELE {remote_filename}")
            self._get_response()
            return False
    def mput(self, pattern):
        """
        Upload nhi·ªÅu file t·ª´ m√°y c·ª•c b·ªô l√™n server d·ª±a tr√™n pattern (v√≠ d·ª•: *.txt, a*)
        - T·ª± ƒë·ªông qu√©t virus cho t·ª´ng file
        - X√°c nh·∫≠n t·ª´ng file n·∫øu prompt_confirm=True
        """
        if not self.ctrl:
            print("‚ùå Ch∆∞a k·∫øt n·ªëi t·ªõi server. H√£y d√πng l·ªánh 'open' tr∆∞·ªõc.")
            return

        # B∆∞·ªõc 1: T√¨m file c·ª•c b·ªô kh·ªõp pattern
        import glob
        matched_files = glob.glob(pattern)
        matched_files = [f for f in matched_files if os.path.isfile(f)]  # Ch·ªâ l·∫•y file, b·ªè th∆∞ m·ª•c
        
        if not matched_files:
            print(f"üîç Kh√¥ng t√¨m th·∫•y file c·ª•c b·ªô n√†o kh·ªõp pattern: {pattern}")
            return

        print(f"üîç T√¨m th·∫•y {len(matched_files)} file kh·ªõp pattern:")
        for i, filename in enumerate(matched_files, 1):
            print(f"  {i}. {filename}")

        # B∆∞·ªõc 2: Upload t·ª´ng file v·ªõi x√°c nh·∫≠n
        success_count = 0
        for local_file in matched_files:
            try:
                # X√°c nh·∫≠n v·ªõi ng∆∞·ªùi d√πng n·∫øu c·∫ßn
                if self.prompt_confirm:
                    confirm = input(f"B·∫°n c√≥ mu·ªën upload file '{local_file}'? (y/n/a): ")
                    if confirm.lower() == 'n':
                        print(f"‚è© ƒê√£ b·ªè qua file: {local_file}")
                        continue
                    if confirm.lower() == 'a':  # T·∫Øt x√°c nh·∫≠n cho c√°c file sau
                        self.prompt_confirm = False
                
                # Th·ª±c hi·ªán upload (s·ª≠ d·ª•ng h√†m upload_ftp hi·ªán c√≥)
                if self.upload_ftp(local_file):
                    success_count += 1
                    
            except Exception as e:
                print(f"‚ùå L·ªói khi upload {local_file}: {str(e)}")
        
        print(f"‚úÖ ƒê√£ upload th√†nh c√¥ng {success_count}/{len(matched_files)} file")
